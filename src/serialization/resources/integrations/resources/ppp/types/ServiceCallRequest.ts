/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as Keet from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { AppointmentType } from "./AppointmentType";
import { MutliTech } from "./MutliTech";
import { MultiTechOrNot } from "./MultiTechOrNot";

export const ServiceCallRequest: core.serialization.ObjectSchema<
    serializers.integrations.ServiceCallRequest.Raw,
    Keet.integrations.ServiceCallRequest
> = core.serialization.object({
    locationContactInfoId: core.serialization.property("locationContactInfoID", core.serialization.string().optional()),
    appointmentType: AppointmentType,
    openServiceCallDate: core.serialization.string().optional(),
    serviceCallTypeId: core.serialization.number(),
    hours: core.serialization.string(),
    minutes: core.serialization.string(),
    arrivalWindow: core.serialization.string(),
    diagnosticFee: core.serialization.number(),
    serviceCallStatus: core.serialization.string(),
    leadSourceId: core.serialization.number(),
    poNumber: core.serialization.string().optional(),
    description: core.serialization.string(),
    notes: core.serialization.string().optional(),
    datepicker1: core.serialization.string(),
    dispatchBoardId: core.serialization.number(),
    callTypeId: core.serialization.property("callTypeID", core.serialization.string().optional()),
    startTime: core.serialization.string().optional(),
    endTime: core.serialization.string().optional(),
    date: core.serialization.string().optional(),
    technicianId: core.serialization.property("technicianID", core.serialization.number().optional()),
    sendEmail: core.serialization.number(),
    doNotEmail: core.serialization.number().optional(),
    arrivalWindowId: core.serialization.property("arrivalWindowID", core.serialization.number()),
    id: core.serialization.string().optional(),
    newCustomer: core.serialization.number(),
    customerFirstName: core.serialization.string(),
    customerLastName: core.serialization.string(),
    customerCompanyName: core.serialization.string(),
    customerFullName: core.serialization.string(),
    newServiceCallDefLeadSourId: core.serialization.property(
        "newServiceCallDefLeadSourID",
        core.serialization.number()
    ),
    appointmentSaveFrom: core.serialization.string(),
    selectedMultiTechSameCall: core.serialization.list(MutliTech).optional(),
    primaryOpenCallTech: core.serialization.string().optional(),
    selectedMultiTechSameCallOrNot: MultiTechOrNot.optional(),
    isMultipleTech: core.serialization.string().optional(),
    isPrimaryTechId: core.serialization.property("isPrimaryTechID", core.serialization.number().optional()),
    isPrimaryTech: core.serialization.string().optional(),
    isSecondaryServiceCallData: core.serialization.number(),
});

export declare namespace ServiceCallRequest {
    interface Raw {
        locationContactInfoID?: string | null;
        appointmentType: AppointmentType.Raw;
        openServiceCallDate?: string | null;
        serviceCallTypeId: number;
        hours: string;
        minutes: string;
        arrivalWindow: string;
        diagnosticFee: number;
        serviceCallStatus: string;
        leadSourceId: number;
        poNumber?: string | null;
        description: string;
        notes?: string | null;
        datepicker1: string;
        dispatchBoardId: number;
        callTypeID?: string | null;
        startTime?: string | null;
        endTime?: string | null;
        date?: string | null;
        technicianID?: number | null;
        sendEmail: number;
        doNotEmail?: number | null;
        arrivalWindowID: number;
        id?: string | null;
        newCustomer: number;
        customerFirstName: string;
        customerLastName: string;
        customerCompanyName: string;
        customerFullName: string;
        newServiceCallDefLeadSourID: number;
        appointmentSaveFrom: string;
        selectedMultiTechSameCall?: MutliTech.Raw[] | null;
        primaryOpenCallTech?: string | null;
        selectedMultiTechSameCallOrNot?: MultiTechOrNot.Raw | null;
        isMultipleTech?: string | null;
        isPrimaryTechID?: number | null;
        isPrimaryTech?: string | null;
        isSecondaryServiceCallData: number;
    }
}

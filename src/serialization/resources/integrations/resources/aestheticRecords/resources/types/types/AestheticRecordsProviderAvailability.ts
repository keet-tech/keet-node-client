/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../../index";
import * as Keet from "../../../../../../../../api/index";
import * as core from "../../../../../../../../core";
import { AestheticRecordsDetailedProvider } from "./AestheticRecordsDetailedProvider";

export const AestheticRecordsProviderAvailability: core.serialization.ObjectSchema<
    serializers.integrations.aestheticRecords.AestheticRecordsProviderAvailability.Raw,
    Keet.integrations.aestheticRecords.AestheticRecordsProviderAvailability
> = core.serialization.object({
    availableDays: core.serialization.property(
        "available_days",
        core.serialization.record(
            core.serialization.string(),
            core.serialization.record(
                core.serialization.string(),
                core.serialization.list(core.serialization.string()),
            ),
        ),
    ),
    provider: AestheticRecordsDetailedProvider,
    uniqueDates: core.serialization.property("unique_dates", core.serialization.list(core.serialization.string())),
    firstAvailable: core.serialization.property(
        "first_available",
        core.serialization
            .record(
                core.serialization.string(),
                core.serialization.record(
                    core.serialization.string(),
                    core.serialization.list(core.serialization.string()),
                ),
            )
            .optional(),
    ),
    timeFormat: core.serialization.property("time_format", core.serialization.string()),
});

export declare namespace AestheticRecordsProviderAvailability {
    export interface Raw {
        available_days: Record<string, Record<string, string[]>>;
        provider: AestheticRecordsDetailedProvider.Raw;
        unique_dates: string[];
        first_available?: Record<string, Record<string, string[]>> | null;
        time_format: string;
    }
}

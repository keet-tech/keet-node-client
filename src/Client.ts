/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "./core";
import { Integrations } from "./api/resources/integrations/client/Client";
import { Link } from "./api/resources/link/client/Client";
import { LinkedAccounts } from "./api/resources/linkedAccounts/client/Client";

export declare namespace KeetClient {
    export interface Options {
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class KeetClient {
    protected _integrations: Integrations | undefined;
    protected _link: Link | undefined;
    protected _linkedAccounts: LinkedAccounts | undefined;

    constructor(protected readonly _options: KeetClient.Options) {}

    public get integrations(): Integrations {
        return (this._integrations ??= new Integrations(this._options));
    }

    public get link(): Link {
        return (this._link ??= new Link(this._options));
    }

    public get linkedAccounts(): LinkedAccounts {
        return (this._linkedAccounts ??= new LinkedAccounts(this._options));
    }
}
